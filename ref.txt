add:
  push bp                               // prologue
  i2i sp => bp
  addI sp, 0 => sp                      // allocate space for local variables (0 bytes)
  loadAI [bp+8] => r1 {x}
  loadAI [bp+12] => r2 {y}
  add r1, r2 => r3
  i2i r3 => ret
  jump l1                               // return (x+y)
l1:
  i2i bp => sp                          // epilogue
  pop bp
  return

main:
  push bp                               // prologue
  i2i sp => bp
  addI sp, -8 => sp                     // allocate space for local variables (8 bytes)
  loadI 10 => r4
  storeAI r4 => [bp-4] {a}              // a = 10
  loadI 10 => r5
  storeAI r5 => [bp-8] {b}              // b = 10
  loadAI [bp-8] => r6 {b}
  push r6
  call voidCall
  addI sp, 4 => sp                      // de-allocate space for parameters (4 bytes)
  loadAI [bp-4] => r7 {a}
  loadAI [bp-8] => r8 {b}
  push r8
  push r7
  call add
  addI sp, 8 => sp                      // de-allocate space for parameters (8 bytes)
  i2i ret => r9
  i2i r9 => ret
  jump l2                               // return add(a, b)
l2:
  i2i bp => sp                          // epilogue
  pop bp
  return

voidCall:
  push bp                               // prologue
  i2i sp => bp
  addI sp, 0 => sp                      // allocate space for local variables (0 bytes)
  loadAI [bp+8] => r10 {a}
  loadI 6 => r11
  mult r10, r11 => r12
  storeAI r12 => [bp+8] {a}             // a = (a*6)
l3:
  i2i bp => sp                          // epilogue
  pop bp
  return
